
--What is the total amount each customer spent at the restaurant?

SELECT  sales.customer_id, 
        SUM(menu.price) as total_spent
FROM sales
LEFT JOIN menu
USING(product_id)
GROUP BY customer_id
ORDER BY total_spent DESC

--How many days has each customer visited the restaurant?

SELECT  customer_id, 
        COUNT(DISTINCT order_date) AS days_of_visit
FROM sales
GROUP BY customer_id
ORDER BY days_of_visit DESC

--What was the first item from the menu purchased by each customer?

SELECT  DISTINCT customer_id, 
        product_name
FROM(   SELECT  customer_id, 
                order_date, 
                product_name, 
                DENSE_RANK() OVER(PARTITION BY customer_id ORDER BY order_date) as rn
FROM sales
LEFT JOIN menu
USING(product_id)
) AS ordered_product_names
 WHERE rn = 1

--What is the most purchased item on the menu and how many times was it purchased by all customers?

SELECT  product_name, 
        COUNT(product_id) AS most_times_purchased
FROM sales
LEFT JOIN menu
USING(product_id)
GROUP BY product_name
ORDER BY most_times_purchased DESC
LIMIT 1

SELECT  sales.customer_id, COUNT(product_id) as product_count
FROM sales
LEFT JOIN menu
USING(product_id)
WHERE LOWER(product_name)='ramen'
GROUP BY customer_id

 
--Which item was the most popular for each customer?

WITH most_popular AS( SELECT  customer_id,
                              product_name, 
                              RANK() OVER(PARTITION BY customer_id ORDER BY total_amount DESC) AS rank
FROM(
                      SELECT  customer_id,
                              product_name, 
                              COUNT(product_id) AS total_amount
from menu
LEFT JOIN sales
USING(product_id)
GROUP BY customer_id, product_name
) AS cte
ORDER BY customer_id)

SELECT  customer_id, 
        product_name
from most_popular
WHERE rank= 1

--Which item was purchased first by the customer after they became a member?

SELECT  customer_id,
        product_name
FROM(
SELECT  sales.customer_id, 
        menu.product_name, 
        sales.order_date,
        members.join_date, 
        ROW_NUMBER() OVER(PARTITION BY customer_id ORDER BY order_date) as rn
FROM sales
LEFT JOIN menu
USING(product_id)
LEFT JOIN members
USING(customer_id)
WHERE members.join_date <= sales.order_date
) AS cte
WHERE rn=1

 
--Which item was purchased just before the customer became a member?

SELECT 	  customer_id,
          product_name
FROM(
SELECT 	  sales.customer_id, 
          menu.product_name, 
          sales.order_date,
          members.join_date, 
          DENSE_RANK() OVER(PARTITION BY customer_id ORDER BY order_date) as rank
FROM sales
LEFT JOIN menu
USING(product_id)
LEFT JOIN members
USING(customer_id)
WHERE members.join_date > sales.order_date
) AS cte
WHERE rank=1

--What is the total items and amount spent for each member before they became a member?

SELECT 	  sales.customer_id,
          COUNT(sales.product_id) as total_items_bought_per_customer, 
          SUM(menu.price) as total_spent
FROM sales
LEFT JOIN members
USING(customer_id)
LEFT JOIN menu
USING(product_id)
WHERE members.join_date > sales.order_date
GROUP BY 1

--If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?

SELECT 	sales.customer_id,
		    SUM(CASE WHEN product_name='sushi' THEN (menu.price*20) ELSE (menu.price*10) END) AS points 
FROM menu
LEFT JOIN sales
USING(product_id)
GROUP BY sales.customer_id

 
In the first week after a customer joins the program (including their join date) 
they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?  Note: This answer takes into account Question 10 where sushi already has a 2x multiplier!

WITH cte AS(		SELECT 	customer_id, 
                        order_date,join_date,
                        SUM(CASE WHEN product_name='sushi' THEN (menu.price*20) ELSE (menu.price*10) END) AS points
FROM sales
LEFT JOIN menu
USING(product_id)
LEFT JOIN members
USING(customer_id)
GROUP BY customer_id,order_date,join_date)

SELECT 	  customer_id, 
          SUM(CASE WHEN order_date BETWEEN join_date AND join_date + INTERVAL '7 days' THEN (cte.points*2) ELSE cte.points END) AS points_earned
FROM cte
WHERE customer_id IN ('A','B') and EXTRACT(MONTH FROM order_date)= 1
GROUP BY 1
ORDER BY 1

